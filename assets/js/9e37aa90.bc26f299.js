"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[5514],{8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function a(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(t.Provider,{value:e},n.children)}},9327:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>a,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"OOP/inheritance","title":"Inheritance","description":"What is Inheritance?","source":"@site/docs/OOP/inheritance.md","sourceDirName":"OOP","slug":"/OOP/inheritance","permalink":"/docs/OOP/inheritance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/OOP/inheritance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Abstraction","permalink":"/docs/OOP/abstraction"},"next":{"title":"Polymorphism","permalink":"/docs/OOP/polymorphism"}}');var i=s(4848),t=s(8453);const a={sidebar_position:4},l="Inheritance",c={},h=[{value:"What is Inheritance?",id:"what-is-inheritance",level:2},{value:"Why use Inheritance?",id:"why-use-inheritance",level:2},{value:"Basic Example:",id:"basic-example",level:2},{value:"Types of Inheritance in Python",id:"types-of-inheritance-in-python",level:2},{value:"\u2705 Summary:",id:"-summary",level:2}];function d(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"inheritance",children:"Inheritance"})}),"\n",(0,i.jsx)(e.h2,{id:"what-is-inheritance",children:"What is Inheritance?"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Inheritance"})," is an OOP concept where a class (child/subclass) can ",(0,i.jsx)(e.strong,{children:"inherit attributes and methods"})," from another class (parent/superclass).",(0,i.jsx)(e.br,{}),"\n","It promotes ",(0,i.jsx)(e.strong,{children:"code reuse"})," and establishes a ",(0,i.jsx)(e.strong,{children:'"is-a" relationship'})," between classes."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"why-use-inheritance",children:"Why use Inheritance?"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Reduces code duplication"}),"\n",(0,i.jsx)(e.li,{children:"Establishes a clear hierarchy"}),"\n",(0,i.jsx)(e.li,{children:"Promotes reusability and extensibility"}),"\n",(0,i.jsx)(e.li,{children:"Helps model real-world relationships"}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"basic-example",children:"Basic Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# animal.py\n\nclass Animal:\n    def speak(self):\n        print("Animal speaks")\n\nclass Dog(Animal):\n    def speak(self):\n        print("Dog barks")\n\ndog = Dog()\ndog.speak()  # Outputs: Dog barks\n'})}),"\n",(0,i.jsx)(e.h2,{id:"types-of-inheritance-in-python",children:"Types of Inheritance in Python"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"1\ufe0f\u20e3 Single Inheritance"}),"\nA subclass inherits from one superclass."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class Parent:\n    def show(self):\n        print("Parent method")\n\nclass Child(Parent):\n    def display(self):\n        print("Child method")\n\nc = Child()\nc.show()\nc.display()\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"2\ufe0f\u20e3 Multiple Inheritance"}),"\nA subclass inherits from more than one parent class."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class Father:\n    def skill(self):\n        print("Gardening")\n\nclass Mother:\n    def talent(self):\n        print("Painting")\n\nclass Child(Father, Mother):\n    pass\n\nc = Child()\nc.skill()\nc.talent()\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"3\ufe0f\u20e3 Multilevel Inheritance"}),"\nA class inherits from a class which itself inherits from another class."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-Python",children:'class Grandparent:\n    def legacy(self):\n        print("Family legacy")\n\nclass Parent(Grandparent):\n    def value(self):\n        print("Parental values")\n\nclass Child(Parent):\n    def dream(self):\n        print("Child\'s dream")\n\nc = Child()\nc.legacy()\nc.value()\nc.dream()\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"4\ufe0f\u20e3 Hierarchical Inheritance"}),"\nMultiple classes inherit from a single parent class."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class Parent:\n    def show(self):\n        print("Parent class")\n\nclass ChildA(Parent):\n    def featureA(self):\n        print("Feature A")\n\nclass ChildB(Parent):\n    def featureB(self):\n        print("Feature B")\n\na = ChildA()\na.show()\na.featureA()\n\nb = ChildB()\nb.show()\nb.featureB()\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"5\ufe0f\u20e3 Hybrid Inheritance"}),"\nCombination of more than one type of inheritance."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-Python",children:'class A:\n    def methodA(self):\n        print("Method from A")\n\nclass B(A):\n    def methodB(self):\n        print("Method from B")\n\nclass C:\n    def methodC(self):\n        print("Method from C")\n\nclass D(B, C):\n    def methodD(self):\n        print("Method from D")\n\nd = D()\nd.methodA()\nd.methodB()\nd.methodC()\nd.methodD()\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-summary",children:"\u2705 Summary:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use inheritance to ",(0,i.jsx)(e.strong,{children:"reuse and extend"})," functionality."]}),"\n",(0,i.jsxs)(e.li,{children:["\u26a0\ufe0f Be cautious of ",(0,i.jsx)(e.strong,{children:"diamond problems"})," in multiple inheritance."]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\udca1 Prefer ",(0,i.jsx)(e.strong,{children:"composition over inheritance"})," when relationships don\u2019t clearly follow an \u201cis-a\u201d pattern."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Inheritance helps create:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Structured and organized"})," code"]}),"\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Better code reuse"})," and ",(0,i.jsx)(e.strong,{children:"extensibility"})]}),"\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Clear relationships"})," between classes"]}),"\n"]})]})}function o(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);