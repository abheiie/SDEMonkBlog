"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[6383],{3617:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"SOLID/liskov-substitution-principle","title":"Liskov Substitution Principle (LSP)","description":"- Subtypes must be substitutable for their base types without altering the correctness of the program.","source":"@site/docs/SOLID/liskov-substitution-principle.md","sourceDirName":"SOLID","slug":"/SOLID/liskov-substitution-principle","permalink":"/docs/SOLID/liskov-substitution-principle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/liskov-substitution-principle.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Open-Closed Principle (OCP)","permalink":"/docs/SOLID/open-close-principle"},"next":{"title":"Interface Segregation Principle (ISP)","permalink":"/docs/SOLID/interface-segregation-principle"}}');var r=s(4848),t=s(8453);const o={sidebar_position:4},l="Liskov Substitution Principle (LSP)",c={},d=[];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"liskov-substitution-principle-lsp",children:"Liskov Substitution Principle (LSP)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Subtypes must be substitutable for their base types without altering the correctness of the program."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In other words, if class ",(0,r.jsx)(n.code,{children:"S"})," is a subclass of class ",(0,r.jsx)(n.code,{children:"T"}),", then objects of type ",(0,r.jsx)(n.code,{children:"T"})," should be replaceable with objects of type ",(0,r.jsx)(n.code,{children:"S"})," without breaking the behavior of the program."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To demonstrate the Liskov Substitution Principle (LSP) and how it improves object-oriented design, consider the following example using a ",(0,r.jsx)(n.code,{children:"Bird"})," class:"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Before Applying LSP:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# bird.py\n\nclass Bird:\n    def fly(self):\n        pass\n\nclass Sparrow(Bird):\n    def fly(self):\n        print("Sparrow flying")\n\nclass Ostrich(Bird):\n    def fly(self):\n        raise NotImplementedError("Ostriches can\'t fly!")\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\ud83d\udd34 Problem: ",(0,r.jsx)(n.code,{children:"Ostrich"})," is a subclass of ",(0,r.jsx)(n.code,{children:"Bird"})," but cannot fulfill the expected behavior of ",(0,r.jsx)(n.code,{children:"fly()"})," \u2014 violating LSP."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"After Applying LSP:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# bird.py\n\nclass Bird:\n    pass\n\nclass FlyingBird(Bird):\n    def fly(self):\n        pass\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sparrow.py\n\nclass Sparrow(FlyingBird):\n    def fly(self):\n        print("Sparrow flying")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# ostrich.py\n\nclass Ostrich(Bird):\n    def run(self):\n        print("Ostrich running")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# main.py\n\ndef make_bird_fly(bird: FlyingBird):\n    bird.fly()\n\nbirds = [Sparrow()]\nfor bird in birds:\n    make_bird_fly(bird)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Now:"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Sparrow"})," is a ",(0,r.jsx)(n.strong,{children:"FlyingBird"})," and safely used where ",(0,r.jsx)(n.code,{children:"FlyingBird"})," is expected."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ostrich"})," no longer pretends to be a flying bird, so no unexpected behavior occurs."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This design makes the code:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Respectful of behavioral expectations"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Easier to maintain and extend"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Aligned with true object hierarchy"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);