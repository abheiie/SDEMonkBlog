"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[5366],{1083:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"SOLID/overview","title":"Overview","description":"The SOLID principles are a set of five design principles that help software developers create more maintainable, understandable, and flexible software systems. The principles are:","source":"@site/docs/SOLID/overview.md","sourceDirName":"SOLID","slug":"/SOLID/overview","permalink":"/docs/SOLID/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"SOLID Principles","permalink":"/docs/docs/solid"},"next":{"title":"Single-Responsibility Principle (SRP)","permalink":"/docs/SOLID/single-responsibility-principle"}}');var t=s(4848),o=s(8453);const r={sidebar_position:1},l="Overview",c={},a=[];function d(e){const n={h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"overview",children:"Overview"})}),"\n",(0,t.jsx)(n.p,{children:"The SOLID principles are a set of five design principles that help software developers create more maintainable, understandable, and flexible software systems. The principles are:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Single Responsibility Principle (SRP)"}),": A class should have only one reason to change, meaning it should only have one job or responsibility."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Open/Closed Principle (OCP)"}),": Software entities should be open for extension but closed for modification, allowing behavior to be added without changing existing code."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Liskov Substitution Principle (LSP)"}),": Subtypes must be substitutable for their base types without altering the correctness of the program."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Interface Segregation Principle (ISP)"}),": Clients should not be forced to depend on interfaces they do not use, promoting the use of smaller, more specific interfaces."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Dependency Inversion Principle (DIP)"}),": High-level modules should not depend on low-level modules; both should depend on abstractions."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);