"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[9220],{8405:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"SOLID/open-close-principle","title":"Open-Closed Principle (OCP)","description":"- Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.","source":"@site/docs/SOLID/open-close-principle.md","sourceDirName":"SOLID","slug":"/SOLID/open-close-principle","permalink":"/docs/SOLID/open-close-principle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/open-close-principle.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Single-Responsibility Principle (SRP)","permalink":"/docs/SOLID/single-responsibility-principle"},"next":{"title":"Liskov Substitution Principle (LSP)","permalink":"/docs/SOLID/liskov-substitution-principle"}}');var i=s(4848),t=s(8453);const o={sidebar_position:3},l="Open-Closed Principle (OCP)",c={},a=[];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"open-closed-principle-ocp",children:"Open-Closed Principle (OCP)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This means you should be able to add new functionality without changing the existing code. OCP helps make your code more maintainable and robust in the face of new requirements."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To demonstrate the Open-Closed Principle (OCP) and how it improves object-oriented design, consider the following ",(0,i.jsx)(n.code,{children:"UserManager"})," class that prints user data in a specific format:"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Before Applying OCP:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# user_manager.py\n\nclass UserManager:\n    def __init__(self, users):\n        self.users = users\n\n    def print_users(self, format="text"):\n        if format == "text":\n            for user in self.users:\n                print(f"{user[\'name\']} - {user[\'email\']}")\n        elif format == "json":\n            import json\n            print(json.dumps(self.users, indent=2))\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd34 Problem: Every time we want to add a new format (e.g., XML, CSV), we must modify the ",(0,i.jsx)(n.code,{children:"print_users"})," method \u2014 violating OCP."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"After Applying OCP:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# user_printer.py\n\nfrom abc import ABC, abstractmethod\n\nclass UserPrinter(ABC):\n    @abstractmethod\n    def print_users(self, users):\n        raise NotImplementedError("Subclasses must implement the print method")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# text_user_printer.py\n\nclass TextUserPrinter(UserPrinter):\n    def print_users(self, users):\n        for user in users:\n            print(f\"{user['name']} - {user['email']}\")\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# json_user_printer.py\n\nimport json\n\nclass JsonUserPrinter(UserPrinter):\n    def print_users(self, users):\n        print(json.dumps(users, indent=2))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\n\nusers = [\n    {"name": "Alice", "email": "alice@example.com"},\n    {"name": "Bob", "email": "bob@example.com"}\n]\n\nprinter = JsonUserPrinter()\nprinter.print_users(users)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Now:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We can ",(0,i.jsx)(n.strong,{children:"add new output formats"})," (e.g., XML, CSV) by simply creating new printer classes."]}),"\n",(0,i.jsxs)(n.li,{children:["No need to modify the existing ",(0,i.jsx)(n.code,{children:"UserManager"})," or printer classes."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach makes the code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 Easier to ",(0,i.jsx)(n.strong,{children:"extend"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Less prone to ",(0,i.jsx)(n.strong,{children:"bugs"})," when updating"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 More ",(0,i.jsx)(n.strong,{children:"modular"})," and ",(0,i.jsx)(n.strong,{children:"flexible"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);