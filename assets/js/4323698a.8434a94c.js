"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[2291],{8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}},8508:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"SOLID/interface-segregation-principle","title":"Interface Segregation Principle (ISP)","description":"- Clients should not be forced to depend on interfaces they do not use.","source":"@site/docs/SOLID/interface-segregation-principle.md","sourceDirName":"SOLID","slug":"/SOLID/interface-segregation-principle","permalink":"/docs/SOLID/interface-segregation-principle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/interface-segregation-principle.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Liskov Substitution Principle (LSP)","permalink":"/docs/SOLID/liskov-substitution-principle"},"next":{"title":"Dependency Inversion Principle (DIP)","permalink":"/docs/SOLID/dependency-inversion-principle"}}');var i=r(4848),o=r(8453);const t={sidebar_position:5},l="Interface Segregation Principle (ISP)",c={},a=[];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"interface-segregation-principle-isp",children:"Interface Segregation Principle (ISP)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Clients should not be forced to depend on interfaces they do not use."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This means a class should not be required to implement methods it doesn\u2019t need. ISP encourages splitting large interfaces into more specific ones."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To demonstrate the Interface Segregation Principle (ISP), consider the following example with a ",(0,i.jsx)(n.code,{children:"Worker"})," interface:"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Before Applying ISP:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# worker.py\n\nclass Worker:\n    def work(self):\n        pass\n\n    def eat(self):\n        pass\n\nclass HumanWorker(Worker):\n    def work(self):\n        print("Working...")\n\n    def eat(self):\n        print("Eating lunch...")\n\nclass RobotWorker(Worker):\n    def work(self):\n        print("Working...")\n\n    def eat(self):\n        raise NotImplementedError("Robots don\'t eat")\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd34 Problem: ",(0,i.jsx)(n.code,{children:"RobotWorker"})," is forced to implement the ",(0,i.jsx)(n.code,{children:"eat"})," method even though it doesn\u2019t make sense for robots."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"After Applying ISP:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# interfaces.py\n\nclass Workable:\n    def work(self):\n        pass\n\nclass Eatable:\n    def eat(self):\n        pass\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# workers.py\n\nclass HumanWorker(Workable, Eatable):\n    def work(self):\n        print("Working...")\n\n    def eat(self):\n        print("Eating lunch...")\n\nclass RobotWorker(Workable):\n    def work(self):\n        print("Working...")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Now:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HumanWorker"})," implements both ",(0,i.jsx)(n.code,{children:"Workable"})," and ",(0,i.jsx)(n.code,{children:"Eatable"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RobotWorker"})," only implements ",(0,i.jsx)(n.code,{children:"Workable"}),", not forced to define irrelevant behavior."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This design makes the code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Cleaner and more meaningful"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Easier to maintain and extend"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 More aligned with real-world roles"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);