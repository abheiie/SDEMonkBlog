"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[2289],{2637:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"SOLID/dependency-inversion-principle","title":"Dependency Inversion Principle (DIP)","description":"- High-level modules should not depend on low-level modules. Both should depend on abstractions.","source":"@site/docs/SOLID/dependency-inversion-principle.md","sourceDirName":"SOLID","slug":"/SOLID/dependency-inversion-principle","permalink":"/docs/SOLID/dependency-inversion-principle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/dependency-inversion-principle.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Interface Segregation Principle (ISP)","permalink":"/docs/SOLID/interface-segregation-principle"},"next":{"title":"Design Patterns","permalink":"/docs/docs/design-patterns"}}');var r=s(4848),l=s(8453);const o={sidebar_position:6},c="Dependency Inversion Principle (DIP)",t={},a=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dependency-inversion-principle-dip",children:"Dependency Inversion Principle (DIP)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"High-level modules should not depend on low-level modules. Both should depend on abstractions."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Abstractions should not depend on details. Details should depend on abstractions."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This principle helps reduce the coupling between high-level logic and low-level implementations, making code more flexible and easier to maintain."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To demonstrate the Dependency Inversion Principle (DIP), consider the following example where a high-level ",(0,r.jsx)(n.code,{children:"Notification"})," class depends on a low-level ",(0,r.jsx)(n.code,{children:"EmailService"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Before Applying DIP:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# email_service.py\n\nclass EmailService:\n    def send_email(self, message):\n        print(f"Sending email: {message}")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:"# notification.py\n\nclass Notification:\n    def __init__(self):\n        self.email_service = EmailService()\n\n    def send(self, message):\n        self.email_service.send_email(message)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udd34 ",(0,r.jsx)(n.strong,{children:"Problem:"}),"\nNotification is tightly coupled to EmailService. Replacing it with another service (like SMS) requires modifying Notification."]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"After Applying DIP:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n# message_service.py\n\nclass MessageService(ABC):\n    @abstractmethod\n    def send(self, message):\n        pass\n\n# email_service.py\n\nclass EmailService(MessageService):\n    def send(self, message):\n        print(f"Sending email: {message}")\n\n# sms_service.py\n\nclass SMSService(MessageService):\n    def send(self, message):\n        print(f"Sending SMS: {message}")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:"# notification.py\n\nclass Notification:\n    def __init__(self, message_service: MessageService):\n        self.message_service = message_service\n\n    def send(self, message):\n        self.message_service.send(message)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# main.py\n\n# main.py\n\nnotification = Notification(EmailService())\nnotification.send("Hello via Email")\n\nnotification = Notification(SMSService())\nnotification.send("Hello via SMS")\n'})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);