"use strict";(self.webpackChunksde_monk_blog=self.webpackChunksde_monk_blog||[]).push([[1989],{2220:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"OOP/abstraction","title":"Abstraction","description":"\u2705 What is Abstraction?","source":"@site/docs/OOP/abstraction.md","sourceDirName":"OOP","slug":"/OOP/abstraction","permalink":"/docs/OOP/abstraction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/OOP/abstraction.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Encapsulation","permalink":"/docs/OOP/encapsulation"},"next":{"title":"Inheritance","permalink":"/docs/OOP/inheritance"}}');var a=t(4848),i=t(8453);const r={sidebar_position:3},o="Abstraction",c={},l=[{value:"\u2705 What is Abstraction?",id:"-what-is-abstraction",level:2},{value:"\u2705 Why use Abstraction?",id:"-why-use-abstraction",level:2},{value:"\u274c Before Applying Abstraction:",id:"-before-applying-abstraction",level:2},{value:"\u2705 After Applying Abstraction:",id:"-after-applying-abstraction",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"abstraction",children:"Abstraction"})}),"\n",(0,a.jsx)(e.h2,{id:"-what-is-abstraction",children:"\u2705 What is Abstraction?"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Abstraction"})," means exposing only the ",(0,a.jsx)(e.strong,{children:"essential features"})," of an object while hiding the ",(0,a.jsx)(e.strong,{children:"unnecessary implementation details"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["It lets you focus on ",(0,a.jsx)(e.strong,{children:"what"})," an object does rather than ",(0,a.jsx)(e.strong,{children:"how"})," it does it \u2014 using interfaces or abstract classes."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-why-use-abstraction",children:"\u2705 Why use Abstraction?"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Provides a clear and simplified interface"}),"\n",(0,a.jsx)(e.li,{children:"Hides complexity from the user"}),"\n",(0,a.jsx)(e.li,{children:"Enables interchangeable components"}),"\n",(0,a.jsx)(e.li,{children:"Improves modularity and flexibility"}),"\n",(0,a.jsx)(e.li,{children:"Makes the system easier to extend and refactor"}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-before-applying-abstraction",children:"\u274c Before Applying Abstraction:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# payment.py\n\nclass PaymentProcessor:\n    def pay_with_credit_card(self, amount):\n        print(f"Processing credit card payment of ${amount}")\n\n    def pay_with_paypal(self, amount):\n        print(f"Processing PayPal payment of ${amount}")\n\n'})}),"\n",(0,a.jsxs)(e.p,{children:["\ud83d\udd34 ",(0,a.jsx)(e.strong,{children:"Problem:"}),"\nCode is tightly coupled to specific payment methods. Adding a new method requires modifying the class."]}),"\n",(0,a.jsx)(e.h2,{id:"-after-applying-abstraction",children:"\u2705 After Applying Abstraction:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-Python",children:"# payment_method.py\n\nfrom abc import ABC, abstractmethod\n\nclass PaymentMethod(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-Python",children:'# credit_card.py\n\nclass CreditCardPayment(PaymentMethod):\n    def pay(self, amount):\n        print(f"Paid ${amount} using Credit Card")\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-Python",children:'# paypal.py\n\nclass PayPalPayment(PaymentMethod):\n    def pay(self, amount):\n        print(f"Paid ${amount} using PayPal")\n\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-Python",children:"# main.py\n\ndef checkout(payment_method: PaymentMethod, amount):\n    payment_method.pay(amount)\n\ncheckout(CreditCardPayment(), 100)\ncheckout(PayPalPayment(), 50)\n\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u2705 Now:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"You can add new payment methods without changing the existing code."}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"The system is modular and extendable."}),"\n",(0,a.jsx)(e.p,{children:"Users of PaymentMethod only care about the pay() method, not the internal details."}),"\n",(0,a.jsx)(e.p,{children:"Abstraction makes your code:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"\u2705 Simpler to use"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"\u2705 Easier to maintain"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"\u2705 Ready for change"}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);